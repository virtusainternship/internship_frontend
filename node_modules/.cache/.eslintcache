[{"/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/index.js":"1","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/reportWebVitals.js":"2","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/App.js":"3","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/HeaderComponent.js":"4","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/DocumentUpload.js":"5","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/FooterComponent.js":"6","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/EducationInformation.js":"7","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/DropDownList.js":"8","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/ListEmployeeComponent.js":"9","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/PersonalInformation.js":"10","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/AddEmployeeComponent.js":"11","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/GapInformation.js":"12","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/services/EmployeeService.js":"13"},{"size":546,"mtime":1635568689000,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1635568689000,"results":"16","hashOfConfig":"15"},{"size":1758,"mtime":1652869177445,"results":"17","hashOfConfig":"15"},{"size":512,"mtime":1646729043968,"results":"18","hashOfConfig":"15"},{"size":1385,"mtime":1652849921095,"results":"19","hashOfConfig":"15"},{"size":292,"mtime":1646843803073,"results":"20","hashOfConfig":"15"},{"size":30572,"mtime":1652871572688,"results":"21","hashOfConfig":"15"},{"size":1885,"mtime":1652849921130,"results":"22","hashOfConfig":"15"},{"size":2349,"mtime":1635568689000,"results":"23","hashOfConfig":"15"},{"size":21580,"mtime":1652882124595,"results":"24","hashOfConfig":"15"},{"size":5551,"mtime":1647325669007,"results":"25","hashOfConfig":"15"},{"size":5038,"mtime":1652875911298,"results":"26","hashOfConfig":"15"},{"size":1031,"mtime":1652864724999,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1p5u2uv",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"37"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/index.js",[],[],"/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/reportWebVitals.js",[],[],"/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/App.js",[],[],[],"/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/HeaderComponent.js",[],[],"/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/DocumentUpload.js",[],[],"/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/FooterComponent.js",[],[],"/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/EducationInformation.js",["70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85"],[],"import React, {useState, } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Form } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport EmployeeService from '../services/EmployeeService'\r\n\r\nconst EducationInformation = () => {\r\n\r\n    \r\n    const [Course , setCourse ] = useState('')\r\n    const [Program, setProgram] = useState('')\r\n    const [CollegeNameandAddress,setCollegeNameandAddress] = useState('')\r\n    const [UniversityNameandAddress,setUniversityNameandAddress] = useState('')\r\n    const [DurationFrom,setDurationFrom] = useState('')\r\n    const [DurationTo,setDurationTo] = useState('')\r\n    const [Percentage,setPercentage] = useState('')\r\n    const [GraduationDate,setGraduationDate] = useState('')\r\n    const [XCourse , setXCourse ] = useState('')\r\n    const [XProgram, setXProgram] = useState('')\r\n    const [XCollegeNameandAddress,setXCollegeNameandAddress] = useState('')\r\n    const [XUniversityNameandAddress,setXUniversityNameandAddress] = useState('')\r\n    const [XDurationFrom,setXDurationFrom] = useState('')\r\n    const [XDurationTo,setXDurationTo] = useState('')\r\n    const [XPercentage,setXPercentage] = useState('')\r\n    //const [XGraduationDate,setXGraduationDate] = useState('')\r\n    \r\n\r\n   \r\n    const [CourseErr, setCourseErr] = useState(false)\r\n    const [ProgramErr, setProgramErr] = useState(false)\r\n    const [CollegeNameandAddressErr,setCollegeNameandAddressErr] = useState('')\r\n    const [UniversityNameandAddressErr,setUniversityNameandAddressErr] = useState('')\r\n    const [DurationFromErr,setDurationFromErr] = useState('')\r\n    const [DurationToErr,setDurationToErr] = useState('')\r\n    const [PercentageErr,setPercentageErr] = useState('')\r\n    const [GraduationDateErr,setGraduationDateErr] = useState('')\r\n    ///////////////////new\r\n    const [XCourseErr, setXCourseErr] = useState(false)\r\n    const [XProgramErr, setXProgramErr] = useState(false)\r\n    const [XCollegeNameandAddressErr,setXCollegeNameandAddressErr] = useState('')\r\n    const [XUniversityNameandAddressErr,setXUniversityNameandAddressErr] = useState('')\r\n    const [XDurationFromErr,setXDurationFromErr] = useState('')\r\n    const [XDurationToErr,setXDurationToErr] = useState('')\r\n    const [XPercentageErr,setXPercentageErr] = useState('')\r\n    //const [XraduationDateErr,setXGraduationDateErr] = useState('')\r\n    \r\n    const {id} = useParams();\r\n    const history = useHistory();\r\n   // const handleClick =() =>\r\n   // history.push('/DocumentUpload');\r\n\r\n    const prevhistory = useHistory();\r\n    const handleprevClick =() =>\r\n    prevhistory.push('/GapInformation');\r\n    \r\n    const handleClick = (e) => {\r\n        console.log('inside education info on submit'+ id);\r\n        e.preventDefault();\r\n        const employee = { Course,Program,CollegeNameandAddress,UniversityNameandAddress,\r\n            Percentage, XCourse,XProgram,XCollegeNameandAddress,XPercentage}\r\n        if (id) {\r\n            EmployeeService.updateEmployeeDet(id, employee).then((response) => {\r\n                history.push('/DocumentUpload/' + id)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n        } else {\r\n            console.log('inside else');\r\n        }\r\n         }\r\n\r\n    // const validTextRegex = new RegExp('/^[a-zA-Z ]*$/');\r\n    var validTextRegex = /^[a-zA-Z\\s]*$/;\r\n      \r\n    const validateRegex = (value) => {\r\n        console.log(value);\r\n        if (!validTextRegex.test(value)) {\r\n            console.log(true);\r\n          return true;\r\n        } else {\r\n            console.log(false);\r\n          return false;\r\n        }\r\n        \r\n      }\r\n      var validTextRegex1 = /^[a-zA-Z\\s]*$/;\r\n      const validate1Regex = (value) => {\r\n        console.log(value);\r\n        if (!validTextRegex1.test(value)) {\r\n            console.log(true);\r\n          return true;\r\n        } else {\r\n            console.log(false);\r\n          return false;\r\n        }}\r\n        var validTextRegex2 = /^[0-9a-zA-Z, ]+$/;\r\n      const validate2Regex = (value) => {\r\n        console.log(value);\r\n        if (!validTextRegex2.test(value)) {\r\n            console.log(true);\r\n          return true;\r\n        } else {\r\n            console.log(false);\r\n          return false;\r\n        }}\r\n        var validTextRegex3 = /^[0-9a-zA-Z, ]+$/;\r\n        const validate3Regex = (value) => {\r\n            console.log(value);\r\n            if (!validTextRegex3.test(value)) {\r\n                console.log(true);\r\n              return true;\r\n            } else {\r\n                console.log(false);\r\n              return false;\r\n            }}\r\n            var validTextRegex4 = /^[0-9/-]+$/;\r\n            const validate4Regex = (value) => {\r\n                console.log(value);\r\n                if (!validTextRegex4.test(value)) {\r\n                    console.log(true);\r\n                  return true;\r\n\r\n                } else {\r\n                    console.log(false);\r\n                  return false;\r\n                }}\r\n                var validTextRegex5 = /^[0-9/-]+$/;\r\n                const validate5Regex = (value) => {\r\n                    console.log(value);\r\n                    if (!validTextRegex5.test(value)) {\r\n                        console.log(true);\r\n                      return true;\r\n                    } else {\r\n                        console.log(false);\r\n                      return false;\r\n                    }}\r\n                    var validTextRegex6 = /^[0-9%.]*$/;\r\n                    const validate6Regex = (value) => {\r\n                        console.log(value);\r\n                        if (!validTextRegex6.test(value)) {\r\n                            console.log(true);\r\n                          return true;\r\n                        } else {\r\n                            console.log(false);\r\n                          return false;\r\n                        }}\r\n                        var validText7Regex = /^[0-9/-]+$/;\r\n                        const validate7Regex = (value) => {\r\n                            console.log(value);\r\n                            if (!validText7Regex.test(value)) {\r\n                                console.log(true);\r\n                              return true;\r\n                            } else {\r\n                                console.log(false);\r\n                              return false;\r\n                            }}\r\n                            \r\n    const title = () => {\r\n\r\n        if(id){\r\n            return <h2 className = \"text-center\">Update Employee</h2>\r\n        }else{\r\n            return <h2 className = \"text-center\">Education Information</h2>\r\n        }\r\n    }\r\n\r\n     const validate = (e) => { \r\n        console.log(e.target.value);\r\n         setCourse(e.target.value);        \r\n         if (validateRegex(e.target.value)) { \r\n             setCourseErr(true); \r\n         } else { \r\n             setCourseErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      const validate1 = (f) => { \r\n        console.log(f.target.value);\r\n         setProgram(f.target.value);        \r\n         if (validate1Regex(f.target.value)) { \r\n             setProgramErr(true); \r\n         } else { \r\n             setProgramErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      const validate2 = (g) => { \r\n        console.log(g.target.value);\r\n         setCollegeNameandAddress(g.target.value);        \r\n         if (validate2Regex(g.target.value)) { \r\n             setCollegeNameandAddressErr(true); \r\n         } else { \r\n             setCollegeNameandAddressErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      const validate3= (h) => { \r\n        console.log(h.target.value);\r\n         setUniversityNameandAddress(h.target.value);        \r\n         if (validate3Regex(h.target.value)) { \r\n             setUniversityNameandAddressErr(true); \r\n         } else { \r\n             setUniversityNameandAddressErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      const validate4= (i) => { \r\n        console.log(i.target.value);\r\n         setDurationFrom(i.target.value);        \r\n         if (validate4Regex(i.target.value)) { \r\n          setDurationFromErr(true); \r\n         } else { \r\n             setDurationFromErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      const validate5= (j) => { \r\n        console.log(j.target.value);\r\n         setDurationTo(j.target.value);        \r\n         if (validate5Regex(j.target.value)) { \r\n             setDurationToErr(true); \r\n         } else { \r\n             setDurationToErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      const validate6= (k) => { \r\n        console.log(k.target.value);\r\n         setPercentage(k.target.value);        \r\n         if (validate6Regex(k.target.value)) { \r\n             setPercentageErr(true); \r\n         } else { \r\n             setPercentageErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      const validate7= (l) => { \r\n        console.log(l.target.value);\r\n         setGraduationDate(l.target.value);        \r\n         if (validate7Regex(l.target.value)) { \r\n             setGraduationDateErr(true); \r\n         } else { \r\n             setGraduationDateErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n\r\n      ////////////////////////////////////nEW reGEX\r\n      var validTextRegex8 = /^[a-zA-Z\\s]*$/;\r\n      \r\n    const validate8Regex = (value) => {\r\n        console.log(value);\r\n        if (!validTextRegex8.test(value)) {\r\n            console.log(true);\r\n          return true;\r\n        } else {\r\n            console.log(false);\r\n          return false;\r\n        }\r\n        \r\n      }\r\n      var validTextRegex9 = /^[a-zA-Z\\s]*$/;\r\n      const validate9Regex = (value) => {\r\n        console.log(value);\r\n        if (!validTextRegex9.test(value)) {\r\n            console.log(true);\r\n          return true;\r\n        } else {\r\n            console.log(false);\r\n          return false;\r\n        }}\r\n        var validTextRegex10 = /^[0-9a-zA-Z, ]+$/;\r\n      const validate10Regex = (value) => {\r\n        console.log(value);\r\n        if (!validTextRegex10.test(value)) {\r\n            console.log(true);\r\n          return true;\r\n        } else {\r\n            console.log(false);\r\n          return false;\r\n        }}\r\n        var validTextRegex11 = /^[0-9a-zA-Z, ]+$/;\r\n        const validate11Regex = (value) => {\r\n            console.log(value);\r\n            if (!validTextRegex11.test(value)) {\r\n                console.log(true);\r\n              return true;\r\n            } else {\r\n                console.log(false);\r\n              return false;\r\n            }}\r\n            var validTextRegex12 = /^[0-9/-]+$/;\r\n            const validate12Regex = (value) => {\r\n                console.log(value);\r\n                if (!validTextRegex12.test(value)) {\r\n                    console.log(true);\r\n                  return true;\r\n\r\n                } else {\r\n                    console.log(false);\r\n                  return false;\r\n                }}\r\n                var validTextRegex13 = /^[0-9/-]+$/;\r\n                const validate13Regex = (value) => {\r\n                    console.log(value);\r\n                    if (!validTextRegex13.test(value)) {\r\n                        console.log(true);\r\n                      return true;\r\n                    } else {\r\n                        console.log(false);\r\n                      return false;\r\n                    }}\r\n                    var validTextRegex14 = /^[0-9%.]*$/;\r\n                    const validate14Regex = (value) => {\r\n                        console.log(value);\r\n                        if (!validTextRegex14.test(value)) {\r\n                            console.log(true);\r\n                          return true;\r\n                        } else {\r\n                            console.log(false);\r\n                          return false;\r\n                        }}\r\n                        var validText15Regex = /^[0-9/-]+$/;\r\n                        const validate15Regex = (value) => {\r\n                            console.log(value);\r\n                            if (!validText15Regex.test(value)) {\r\n                                console.log(true);\r\n                              return true;\r\n                            } else {\r\n                                console.log(false);\r\n                              return false;\r\n                            }}\r\n                            \r\n    \r\n\r\n     const validate8 = (m) => { \r\n        console.log(m.target.value);\r\n         setXCourse(m.target.value);        \r\n         if (validate8Regex(m.target.value)) { \r\n             setXCourseErr(true); \r\n         } else { \r\n             setXCourseErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      const validate9 = (n) => { \r\n        console.log(n.target.value);\r\n         setXProgram(n.target.value);        \r\n         if (validate9Regex(n.target.value)) { \r\n             setXProgramErr(true); \r\n         } else { \r\n             setXProgramErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      const validate10 = (o) => { \r\n        console.log(o.target.value);\r\n         setXCollegeNameandAddress(o.target.value);        \r\n         if (validate10Regex(o.target.value)) { \r\n             setXCollegeNameandAddressErr(true); \r\n         } else {  \r\n             setXCollegeNameandAddressErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      const validate11= (p) => { \r\n        console.log(p.target.value);\r\n         setXUniversityNameandAddress(p.target.value);        \r\n         if (validate11Regex(p.target.value)) { \r\n             setXUniversityNameandAddressErr(true); \r\n         } else { \r\n             setXUniversityNameandAddressErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      const validate12= (q) => { \r\n        console.log(q.target.value);\r\n         setXDurationFrom(q.target.value);        \r\n         if (validate12Regex(q.target.value)) { \r\n          setXDurationFromErr(true); \r\n         } else { \r\n             setXDurationFromErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      const validate13= (r) => { \r\n        console.log(r.target.value);\r\n         setXDurationTo(r.target.value);        \r\n         if (validate13Regex(r.target.value)) { \r\n             setXDurationToErr(true); \r\n         } else { \r\n             setXDurationToErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      const validate14= (s) => { \r\n        console.log(s.target.value);\r\n         setXPercentage(s.target.value);        \r\n         if (validate14Regex(s.target.value)) { \r\n             setXPercentageErr(true); \r\n         } else { \r\n             setXPercentageErr(false);\r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n      //const validate15= (h) => { \r\n        //console.log(h.target.value);\r\n         //setxGraduationDate(h.target.value);        \r\n         //if (validate15Regex(h.target.value)) { \r\n            // setXGraduationDateErr(true); \r\n        // } else { \r\n             //setXGraduationDateErr(false);\r\n             //setFirstName(e.target.value);\r\n         //}\r\n          \r\n      //};\r\n     \r\n    return (\r\n        <div>\r\n           <br /><br />\r\n           <div className = \"container\">\r\n                <div className = \"row\">\r\n                    <div className = \"card col-md-6 offset-md-3 offset-md-3\">\r\n                       {\r\n                           title()\r\n                       }\r\n                        <div className = \"card-body\">\r\n                            <form> \r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Degree :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter Degree\"\r\n                                        name = \"Degree\"\r\n                                        className = \"form-control\"\r\n                                        \r\n                                       \r\n                                     \r\n                                        //  onChange = {(e) => setFirstName(e.target.value)}\r\n                                        >\r\n                                          \r\n                                    </input>\r\n                                    </div>\r\n                                    <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Course :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter Course\"\r\n                                        name = \"Course\"\r\n                                        className = \"form-control\"\r\n                                        required\r\n                                        value = {Course}\r\n                                        onChange = {(e) => validate(e)}\r\n                                    >\r\n                                    </input>\r\n                                    {CourseErr && <p style={{color: 'red'}}>Only Alphabets are allowed</p>} \r\n                                \r\n                                </div>\r\n                                   \r\n  \r\n\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Program :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter Program\"\r\n                                        name = \"Program\"\r\n                                        className = \"form-control\"\r\n                                        required\r\n                                        value = {Program}\r\n                                       \r\n                                        onChange = {(f) => validate1(f)}\r\n                                    >\r\n                                    </input>\r\n                                    {ProgramErr && <p style={{color: 'red'}}>Only Alphabets are allowed</p>} \r\n                                \r\n                                </div>\r\n                                   \r\n  \r\n                                \r\n                                \r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> College Name and Address :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter College Name and Address\"\r\n                                        name = \"College Name and Address\"\r\n                                        className = \"form-control\"\r\n                                        \r\n                                        required\r\n                                        value = {CollegeNameandAddress}\r\n                                        onChange = {(g) => validate2(g)}\r\n                                    >\r\n                                    </input>\r\n                                    {CollegeNameandAddressErr && <p style={{color: 'red'}}>Special Characters are not allowed</p>}\r\n                                </div> <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\">University Name and Address  :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter University Name and Address\"\r\n                                        name = \"University Name and Address\"\r\n                                        className = \"form-control\"\r\n                                        value = {UniversityNameandAddress}\r\n                                        required\r\n                                       \r\n                                       \r\n                                        onChange = {(h) => validate3(h)}\r\n                                    >\r\n                                    </input>\r\n                                    {UniversityNameandAddressErr && <p style={{color: 'red'}}>Special Characters are not allowed</p>} \r\n                                \r\n                                </div>\r\n                                \r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Duration From :</label>\r\n                                    <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <Form.Group controlId=\"dob\">\r\n                            <Form.Label>Select Date</Form.Label>\r\n                            <Form.Control type=\"date\" name=\"Duration\" placeholder=\"Duration From\" />\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n</div>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Duration To :</label>\r\n                                    <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <Form.Group controlId=\"dob\">\r\n                            <Form.Label>Select Date</Form.Label>\r\n                            <Form.Control type=\"date\" name=\"Duration\" placeholder=\"Duration To\" />\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n</div>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Percentage :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Percentage\"\r\n                                        name = \"Percentage\"\r\n                                        className = \"form-control\"\r\n                                        value = {Percentage}\r\n                                        required\r\n\r\n                                        onChange = {(k) => validate6(k)}\r\n                                    >\r\n                                    </input>\r\n                                    {PercentageErr && <p style={{color: 'red'}}>Only numbers are allowed</p>}  \r\n\r\n                                </div>\r\n                                \r\n                                        <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> X :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter Your Group\"\r\n                                        name = \"X\"\r\n                                        className = \"form-control\"\r\n                                        \r\n                                       \r\n                                     \r\n                                        //  onChange = {(e) => setFirstName(e.target.value)}\r\n                                        >\r\n                                          \r\n                                    </input>\r\n                                    </div>\r\n                                    <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Board:</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter Your Board\"\r\n                                        name = \"Board\"\r\n                                        className = \"form-control\"\r\n                                        required\r\n                                        value = {XCourse}\r\n                                        onChange = {(m) => validate8(m)}\r\n                                    >\r\n                                    </input>\r\n                                    {XCourseErr && <p style={{color: 'red'}}>Only Alphabets are allowed</p>} \r\n                                \r\n                                </div>\r\n                                   \r\n  \r\n\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Program :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter Program\"\r\n                                        name = \"Program\"\r\n                                        className = \"form-control\"\r\n                                        required\r\n                                        value = {XProgram}\r\n                                       \r\n                                        onChange = {(m) => validate9(m)}\r\n                                    >\r\n                                    </input>\r\n                                    {XProgramErr && <p style={{color: 'red'}}>Only Alphabets are allowed</p>} \r\n                                \r\n                                </div>\r\n                                   \r\n  \r\n                                \r\n                                \r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> School Name and Address :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter School Name and Address\"\r\n                                        name = \"School Name and Address\"\r\n                                        className = \"form-control\"\r\n                                        \r\n                                        required\r\n                                        value = {XCollegeNameandAddress}\r\n                                        onChange = {(o) => validate10(o)}\r\n                                    >\r\n                                    </input>\r\n                                    {XCollegeNameandAddressErr && <p style={{color: 'red'}}>Special Characters are not allowed</p>}\r\n                                </div> <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\">Board Name and Address  :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter University Name and Address\"\r\n                                        name = \"University Name and Address\"\r\n                                        className = \"form-control\"\r\n                                        value = {XUniversityNameandAddress}\r\n                                        required\r\n                                       \r\n                                       \r\n                                        onChange = {(p) => validate11(p)}\r\n                                    >\r\n                                    </input>\r\n                                    {XUniversityNameandAddressErr && <p style={{color: 'red'}}>Special Characters are not allowed</p>} \r\n                                \r\n                                </div>\r\n                                \r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Duration From :</label>\r\n                                    <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <Form.Group controlId=\"dob\">\r\n                            <Form.Label>Select Date</Form.Label>\r\n                            <Form.Control type=\"date\" name=\"Duration\" placeholder=\"Duration From\" />\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n</div>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Duration To :</label>\r\n                                    <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <Form.Group controlId=\"dob\">\r\n                            <Form.Label>Select Date</Form.Label>\r\n                            <Form.Control type=\"date\" name=\"Duration\" placeholder=\"Duration To\" />\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n</div>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Percentage :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Percentage\"\r\n                                        name = \"Percentage\"\r\n                                        className = \"form-control\"\r\n                                        value = {XPercentage}\r\n                                        required\r\n\r\n                                        onChange = {(s) => validate14(s)}\r\n                                    >\r\n                                    </input>\r\n                                    {XPercentageErr && <p style={{color: 'red'}}>Only numbers are allowed</p>}  \r\n\r\n                                </div>\r\n                               \r\n<button type=\"button\" onClick={handleprevClick}>Previous Page</button>\r\n<button type=\"button\" onClick={handleClick}>Next Page</button>\r\n                            </form>\r\n\r\n                        </div>\r\n                    </div>\r\n                  </div>\r\n\r\n           </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EducationInformation;","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/DropDownList.js",["86","87","88","89","90"],[],"/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/ListEmployeeComponent.js",[],[],"/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/PersonalInformation.js",["91","92"],[],"import React, {useState, } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Form } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport EmployeeService from '../services/EmployeeService'\r\n\r\nconst PersonalInformation = () => {\r\n\r\n    const [firstName, setFirstName] = useState('')\r\n    const [lastName, setLastName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [dob, setDob] = useState('')\r\n    const [maritalStatus, setMaritalStatus] = useState('')\r\n    const [HouseNo,setHouseNo] = useState('')\r\n    const [City,setCity] = useState('')\r\n    const [State,setState] = useState('')\r\n    const [Country,setCountry] = useState('')\r\n    const [MobileNumber,setMobileNumber] = useState('')\r\n    const [PassportNo,setPassportNo] = useState('')\r\n    const [Pincode,setPincode] = useState('')\r\n    const [PANNo,setPANNo] = useState('')\r\n    const [nationality, setNationality] = useState('')\r\n    const [sex, setSex] = useState('')\r\n    \r\n\r\n    const [nameErr, setNameErr,] = useState(false)\r\n    const [LastNameErr, setLastNameErr] = useState(false)\r\n    const [CityErr, setCityErr] = useState(false)\r\n    const [StateErr, setStateErr] = useState(false)   \r\n    const [CountryErr, setCountryErr] = useState(false)\r\n    const [PANNoErr, setPANNoErr] = useState(false)\r\n    const [PassportNoErr , setPassportNoErr] = useState(false)\r\n\r\n    const {id} = useParams();\r\n    const history = useHistory();\r\n    /* const handleClick =() => */\r\n    /* history.push('/GapInformation'); */\r\n     \r\n    const handleClick = (e) => {\r\n      console.log('on click of submit ' + id);\r\n      e.preventDefault();\r\n      const employee = { firstName, lastName, email, sex, nationality, HouseNo, City, PANNo, Pincode, PassportNo,\r\n      MobileNumber,State, Country }\r\n      if (id) {\r\n          EmployeeService.updateEmployeeDet(id, employee).then((response) => {\r\n              history.push('/GapInformation/' + id)\r\n          }).catch(error => {\r\n              console.log(error)\r\n          })\r\n      } else {\r\n          EmployeeService.createEmployeeDet(employee).then((response) => {\r\n              console.log(response.data.id)\r\n              history.push('/GapInformation/' + response.data.id);\r\n          }).catch(error => {\r\n              console.log(error)\r\n          })\r\n      }\r\n  }\r\n    \r\n    \r\n\r\n    // const validTextRegex = new RegExp('/^[a-zA-Z ]*$/');\r\n    var validTextRegex = /^[a-zA-Z\\s]*$/;\r\n      \r\n    const validateRegex = (value) => {\r\n        console.log(value);\r\n        if (!validTextRegex.test(value)) {\r\n            console.log(true);\r\n          return true;\r\n        } else {\r\n            console.log(false);\r\n          return false;\r\n        }\r\n        \r\n      };\r\n      \r\n     \r\n\r\n    const title = () => {\r\n\r\n        if(id){\r\n            return <h2 className = \"text-center\">Update Employee</h2>\r\n        }else{\r\n            return <h2 className = \"text-center\">PersonalInformation</h2>\r\n        }\r\n    }\r\n\r\n     const validate = (e) => { \r\n        console.log(e.target.value);\r\n         setFirstName(e.target.value);\r\n               \r\n         if (validateRegex(e.target.value)) { \r\n             setNameErr(true);\r\n             \r\n         } else { \r\n             setNameErr(false);\r\n             \r\n             //setFirstName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n\r\n      var validTextRegex1 = /^[a-zA-Z\\s]*$/;\r\n      \r\n      const validate1Regex = (value) => {\r\n        console.log(value);\r\n        if (!validTextRegex1.test(value)) {\r\n            console.log(true);\r\n          return true;\r\n        } else {\r\n            console.log(false);\r\n          return false;\r\n        }\r\n        \r\n      };\r\n\r\n    \r\n\r\n      const validate1 = (f) => { \r\n        console.log(f.target.value);\r\n         \r\n         setLastName(f.target.value);       \r\n         if (validate1Regex(f.target.value)) { \r\n             \r\n             setLastNameErr(true); \r\n         } else { \r\n             \r\n             setLastNameErr(false);\r\n             //setLastName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n\r\n      //new///////////////////City//////////////////////////////\r\n      var validTextRegex2 = /^[a-zA-Z\\s]*$/;\r\n      \r\n      const validate2Regex = (value) => {\r\n        console.log(value);\r\n        if (!validTextRegex2.test(value)) {\r\n            console.log(true);\r\n          return true;\r\n        } else {\r\n            console.log(false);\r\n          return false;\r\n        }\r\n        \r\n      };\r\n\r\n    \r\n\r\n      const validate2 = (g) => { \r\n        console.log(g.target.value);\r\n         \r\n         setCity(g.target.value);       \r\n         if (validate2Regex(g.target.value)) { \r\n             \r\n             setCityErr(true); \r\n         } else { \r\n             \r\n             setCityErr(false);\r\n             //setLastName(e.target.value);\r\n         }\r\n          \r\n      }; \r\n\r\n    ///////////////////////STATE////////////\r\n    var validTextRegex3 = /^[a-zA-Z\\s]*$/;\r\n      \r\n      const validate3Regex = (value) => {\r\n        console.log(value);\r\n        if (!validTextRegex3.test(value)) {\r\n            console.log(true);\r\n          return true;\r\n        } else {\r\n            console.log(false);\r\n          return false;\r\n        }\r\n        \r\n      };\r\n\r\n    \r\n\r\n      const validate3 = (h) => { \r\n        console.log(h.target.value);\r\n         \r\n         setState(h.target.value);       \r\n         if (validate3Regex(h.target.value)) { \r\n             \r\n             setStateErr(true); \r\n         } else { \r\n             \r\n             setStateErr(false);\r\n             //setState(e.target.value);\r\n         }\r\n          \r\n      };\r\n     \r\n    ////////////////////////COUNTRY/////////////////////////\r\n    var validTextRegex4 = /^[a-zA-Z\\s]*$/;\r\n      \r\n      const validate4Regex = (value) => {\r\n        console.log(value);\r\n        if (!validTextRegex4.test(value)) {\r\n            console.log(true);\r\n          return true;\r\n        } else {\r\n            console.log(false);\r\n          return false;\r\n        }\r\n        \r\n      };\r\n\r\n    \r\n\r\n      const validate4 = (i) => { \r\n        console.log(i.target.value);\r\n         \r\n         setCountry(i.target.value);       \r\n         if (validate4Regex(i.target.value)) { \r\n             \r\n             setCountryErr(true); \r\n         } else { \r\n             \r\n             setCountryErr(false);\r\n             //setCountry(e.target.value);\r\n         }\r\n          \r\n      };\r\n      ///////////Pan//////////////////\r\n\r\n      var validTextRegex5 = /^[0-9a-zA-Z]*$/;\r\n      \r\n      const validate5Regex = (value) => {\r\n        console.log(value);\r\n        if (!validTextRegex5.test(value)) {\r\n            console.log(true);\r\n          return true;\r\n        } else {\r\n            console.log(false);\r\n          return false;\r\n        }\r\n        \r\n      };\r\n\r\n    \r\n\r\n      const validate5 = (j) => { \r\n        console.log(j.target.value);\r\n         \r\n         setPANNo(j.target.value);       \r\n         if (validate5Regex(j.target.value)) { \r\n             \r\n             setPANNoErr(true); \r\n         } else { \r\n             \r\n             setPANNoErr(false);\r\n             //setCountry(e.target.value);\r\n         }\r\n          \r\n      };\r\n\r\n      /////////////Passport/////////////\r\n      /* var validTextRegex6 = /^[0-9a-zA-Z]*$/; */\r\n      /*  */\r\n      /* const validate6Regex = (value) => { */\r\n      /*   console.log(value); */\r\n      /*   if (!validTextRegex6.test(value)) { */\r\n      /*       console.log(true); */\r\n      /*     return true; */\r\n      /*   } else { */\r\n      /*       console.log(false); */\r\n      /*     return false; */\r\n      /*   } */\r\n      /*    */\r\n      /* }; */\r\n\r\n    \r\n\r\n      const validate6 = (k) => { \r\n        console.log(k.target.value);\r\n         \r\n         setPassportNo(k.target.value);       \r\n         if (validate5Regex(k.target.value)) { \r\n             \r\n             setPassportNoErr(true); \r\n         } else { \r\n             \r\n             setPassportNoErr(false);\r\n             //setCountry(e.target.value);\r\n         }\r\n          \r\n      };\r\n\r\n      \r\n      \r\n      \r\n    return (\r\n      \r\n        <div>\r\n           <br /><br />\r\n           <div className = \"container\">\r\n                <div className = \"row\">\r\n                    <div className = \"card col-md-6 offset-md-3 offset-md-3\">\r\n                       {\r\n                           title()\r\n                       }\r\n                        <div className = \"card-body\">\r\n                            <form onSubmit={(e) => handleClick(e)}> \r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> First Name :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter first name\"\r\n                                        name = \"firstName\"\r\n                                        className = \"form-control\"\r\n                                        required\r\n                                       \r\n                                        value = {firstName}\r\n                                        onChange = {(e) => validate(e)}\r\n                                        //  onChange = {(e) => setFirstName(e.target.value)}\r\n                                        >\r\n                                          \r\n                                    </input>\r\n                                    {nameErr && <p style={{color: 'red'}}>Only Alphabets are allowed</p>} \r\n                                </div>\r\n\r\n                                 \r\n                                   <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Last Name :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter last name\"\r\n                                        name = \"lastName\"\r\n                                        className = \"form-control\"\r\n                                        required\r\n                                        value = {lastName}\r\n                                         onChange = {(f) => validate1(f)}\r\n                                    >\r\n                                    </input>\r\n                                    {LastNameErr && <p style={{color: 'red'}}>Only Alphabets are allowed</p>}\r\n                                \r\n                                </div>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Nationality :</label>\r\n                                    <div class=\"col-md-3\">\r\n                                  \r\n                                 <select name=\"nationality\" \r\n                                 onChange = {(e) => setNationality(e.target.value)}\r\n                                  class=\"form-select\" id=\"validationDefault04\" required>\r\n                                  <option selected disabled value=\"\">Country</option>\r\n                                   <option>India</option>\r\n                                    <option>USA</option>\r\n                                      <option>UK</option>\r\n                                  </select>\r\n                                  </div> \r\n                                </div>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Sex :</label>\r\n                                    <div class=\"form-check\">\r\n      <input type=\"radio\" class=\"form-check-input\" id=\"radio1\" name=\"sex\" onChange={(e) => setSex(e.target.value)} value=\"option1\" checked></input>\r\n      <label class=\"form-check-label\" for=\"radio1\">Male</label>\r\n    </div>\r\n    <div class=\"form-check\">\r\n      <input type=\"radio\" class=\"form-check-input\" id=\"radio2\" name=\"sex\" onChange={(e) => setSex(e.target.value)} value=\"option2\"></input>\r\n      <label class=\"form-check-label\" for=\"radio2\">Female</label>\r\n    </div>\r\n    <div class=\"form-check\">\r\n      <input type=\"radio\" class=\"form-check-input\" id=\"radio3\" name=\"sex\" onChange={(e) => setSex(e.target.value)} value=\"option3\"></input>\r\n      <label class=\"form-check-label\" for=\"radio2\">Others</label>\r\n    </div>\r\n                                     \r\n                                \r\n                                </div>\r\n                                \r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Marital Status :</label>\r\n                                    <div class=\"form-check\">\r\n      \r\n\r\n      <label> <button name='maritalStatus' value={maritalStatus} type=\"button\" class=\"btn btn-outline-primary\">Single</button></label>\r\n       <label> <button name='maritalStatus' value={maritalStatus} type=\"button\" class=\"btn btn-outline-secondary\">Married</button></label>\r\n    </div></div>\r\n    \r\n    <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Date Of Birth :</label>\r\n                                    <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <Form.Group controlId=\"dob\">\r\n                            <Form.Label>Select Date</Form.Label>\r\n                            <Form.Control type=\"date\" name=\"dob\" value={dob} placeholder=\"Date of Birth\" />\r\n                        </Form.Group>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n</div>\r\n                                \r\n                                \r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Email Id :</label>\r\n                                    <form>\r\n    \r\n    \r\n    <input type=\"email\" name=\"email\" \r\n    onChange = {(e) => setEmail(e.target.value)}\r\n    class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\"></input>\r\n    <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small></form>\r\n  \r\n                                     \r\n                                </div>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> House No :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"EnterHouse No\"\r\n                                        name = \"HouseNo\"\r\n                                        className = \"form-control\"\r\n                                        value = {HouseNo}\r\n                                        required\r\n                                        onChange = {(e) => setHouseNo(e.target.value)}\r\n                                    >\r\n                                    </input></div>\r\n                                     \r\n                                    <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> City :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter City\"\r\n                                        name = \"City\"\r\n                                        className = \"form-control\"\r\n                                        required\r\n                                        value = {City}\r\n                                         onChange = {(g) => validate2(g)}\r\n                                    >\r\n                                    </input>\r\n                                    {CityErr && <p style={{color: 'red'}}>Only Alphabets are allowed</p>}\r\n                                \r\n                                </div>\r\n                                \r\n                                \r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> State :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter State\"\r\n                                        name = \"State\"\r\n                                        className = \"form-control\"\r\n                                        required\r\n                                        value = {State}\r\n                                         onChange = {(h) => validate3(h)}\r\n                                    >\r\n                                    </input>\r\n                                    {StateErr && <p style={{color: 'red'}}>Only Alphabets are allowed</p>}\r\n                                \r\n                                </div>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Country :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter Country\"\r\n                                        name = \"Country\"\r\n                                        className = \"form-control\"\r\n                                        required\r\n                                        value = {Country}\r\n                                         onChange = {(i) => validate4(i)}\r\n                                    >\r\n                                    </input>\r\n                                    {CountryErr && <p style={{color: 'red'}}>Only Alphabets are allowed</p>}\r\n                                \r\n                                </div>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Pincode :</label>\r\n                                    <input\r\n                                        type = \"number\"\r\n                                        placeholder = \"Pincode\"\r\n                                        name = \"Pincode\"\r\n                                        className = \"form-control\"\r\n                                        value = {Pincode}\r\n                                        required\r\n                                        onChange = {(e) => setPincode(e.target.value)}\r\n                                    >\r\n                                    </input>\r\n                                     \r\n                                </div>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Mobile Number :</label>\r\n                                    <input\r\n                                        type = \"number\"\r\n                                        placeholder = \"Mobile Number\"\r\n                                        name = \"MobileNumber\"\r\n                                        className = \"form-control\"\r\n                                        value = {MobileNumber}\r\n                                        required\r\n                                        onChange = {(e) => setMobileNumber(e.target.value)}\r\n                                    >\r\n                                    </input>\r\n                                     \r\n                                </div>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\">Passport No :</label>\r\n                                    <input\r\n                                        type = \"Passport No\"\r\n                                        placeholder = \"Passport No\"\r\n                                        name = \"PassportNo\"\r\n                                        className = \"form-control\"\r\n                                        value = {PassportNo}\r\n                                        required\r\n                                        onChange = {(k) => validate6(k)}\r\n                                    >\r\n                                    </input>\r\n                                    {PassportNoErr && <p style={{color: 'red'}}>Only NOs and Text</p>} \r\n                                </div>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\">PAN No :</label>\r\n                                    <input\r\n                                        type = \"PAN No\"\r\n                                        placeholder = \"PAN No\"\r\n                                        name = \"PANNo\"\r\n                                        className = \"form-control\"\r\n                                        value = {PANNo}\r\n                                        required\r\n                                        onChange = {(f) => validate5(f)}\r\n                                    >\r\n                                    </input>\r\n                                    {PANNoErr && <p style={{color: 'red'}}>No Space or Special Char allowed</p>}\r\n                                     \r\n\r\n                                </div>\r\n                                <button type=\"submit\">Next Page</button>\r\n                            </form>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n           </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonalInformation;","/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/AddEmployeeComponent.js",["93"],[],"/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/components/GapInformation.js",[],[],"/Users/deepak/Documents/Learning/Workspace/React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main/react-hooks-frontend/src/services/EmployeeService.js",[],[],{"ruleId":"94","severity":1,"message":"95","line":14,"column":12,"nodeType":"96","messageId":"97","endLine":14,"endColumn":24},{"ruleId":"94","severity":1,"message":"98","line":15,"column":12,"nodeType":"96","messageId":"97","endLine":15,"endColumn":22},{"ruleId":"94","severity":1,"message":"99","line":17,"column":12,"nodeType":"96","messageId":"97","endLine":17,"endColumn":26},{"ruleId":"94","severity":1,"message":"100","line":22,"column":12,"nodeType":"96","messageId":"97","endLine":22,"endColumn":25},{"ruleId":"94","severity":1,"message":"101","line":23,"column":12,"nodeType":"96","messageId":"97","endLine":23,"endColumn":23},{"ruleId":"94","severity":1,"message":"102","line":33,"column":12,"nodeType":"96","messageId":"97","endLine":33,"endColumn":27},{"ruleId":"94","severity":1,"message":"103","line":34,"column":12,"nodeType":"96","messageId":"97","endLine":34,"endColumn":25},{"ruleId":"94","severity":1,"message":"104","line":36,"column":12,"nodeType":"96","messageId":"97","endLine":36,"endColumn":29},{"ruleId":"94","severity":1,"message":"105","line":42,"column":12,"nodeType":"96","messageId":"97","endLine":42,"endColumn":28},{"ruleId":"94","severity":1,"message":"106","line":43,"column":12,"nodeType":"96","messageId":"97","endLine":43,"endColumn":26},{"ruleId":"94","severity":1,"message":"107","line":211,"column":13,"nodeType":"96","messageId":"97","endLine":211,"endColumn":22},{"ruleId":"94","severity":1,"message":"108","line":222,"column":13,"nodeType":"96","messageId":"97","endLine":222,"endColumn":22},{"ruleId":"94","severity":1,"message":"109","line":244,"column":13,"nodeType":"96","messageId":"97","endLine":244,"endColumn":22},{"ruleId":"94","severity":1,"message":"110","line":332,"column":31,"nodeType":"96","messageId":"97","endLine":332,"endColumn":46},{"ruleId":"94","severity":1,"message":"111","line":388,"column":13,"nodeType":"96","messageId":"97","endLine":388,"endColumn":23},{"ruleId":"94","severity":1,"message":"112","line":399,"column":13,"nodeType":"96","messageId":"97","endLine":399,"endColumn":23},{"ruleId":"113","severity":1,"message":"114","line":15,"column":15,"nodeType":"115","endLine":15,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":16,"column":15,"nodeType":"115","endLine":16,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":17,"column":15,"nodeType":"115","endLine":17,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":19,"column":15,"nodeType":"115","endLine":19,"endColumn":27},{"ruleId":"113","severity":1,"message":"114","line":26,"column":9,"nodeType":"115","endLine":26,"endColumn":21},{"ruleId":"94","severity":1,"message":"116","line":12,"column":17,"nodeType":"96","messageId":"97","endLine":12,"endColumn":23},{"ruleId":"94","severity":1,"message":"117","line":13,"column":27,"nodeType":"96","messageId":"97","endLine":13,"endColumn":43},{"ruleId":"118","severity":1,"message":"119","line":48,"column":8,"nodeType":"120","endLine":48,"endColumn":10,"suggestions":"121"},"no-unused-vars","'DurationFrom' is assigned a value but never used.","Identifier","unusedVar","'DurationTo' is assigned a value but never used.","'GraduationDate' is assigned a value but never used.","'XDurationFrom' is assigned a value but never used.","'XDurationTo' is assigned a value but never used.","'DurationFromErr' is assigned a value but never used.","'DurationToErr' is assigned a value but never used.","'GraduationDateErr' is assigned a value but never used.","'XDurationFromErr' is assigned a value but never used.","'XDurationToErr' is assigned a value but never used.","'validate4' is assigned a value but never used.","'validate5' is assigned a value but never used.","'validate7' is assigned a value but never used.","'validate15Regex' is assigned a value but never used.","'validate12' is assigned a value but never used.","'validate13' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setDob' is assigned a value but never used.","'setMaritalStatus' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["122"],{"desc":"123","fix":"124"},"Update the dependencies array to be: [id]",{"range":"125","text":"126"},[1417,1419],"[id]"]